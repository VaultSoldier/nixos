# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ 
      (modulesPath + "/installer/scan/not-detected.nix")
      ../../modules/hardware/nvidia.nix
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usb_storage" "usbhid" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/864246de-0162-425c-b557-bc136d136c98";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/EA3B-E8E8";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/2ced5d66-f869-48fe-870a-179a35dffa9b"; }
    ];

  fileSystems."/mnt/HDD_700GB" =
    { device = "/dev/disk/by-uuid/b74aef4c-c91a-4170-8086-3863a47942ff";
      fsType = "btrfs";
      options = [ "compress=zstd" ];
    };

  fileSystems."/mnt/HDD_1TB" =
    { device = "/dev/disk/by-uuid/79134923-f778-4e75-9a4d-a6b574619b5f";
      fsType = "btrfs";
      options = [ "compress=zstd" ];
    };

  fileSystems."/mnt/SSD_240GB" =
    { device = "/dev/disk/by-uuid/1932f5e2-0e5e-49bf-9c0c-60fc72a153ed";
      fsType = "btrfs";
      options = [ "compress=zstd" ];
    };

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp7s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
